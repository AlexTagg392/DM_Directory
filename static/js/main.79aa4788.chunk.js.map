{"version":3,"sources":["components/NavBar/index.js","components/Table/index.js","components/Container/index.js","components/Footbar/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","src","alt","height","width","Directory","title","columns","field","type","data","image","firstName","lastName","email","birthYear","jobTitle","options","sorting","Container","props","Footer","Wrapper","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iTAeeA,MAXf,WACE,OACE,yBAAKC,UAAU,iDACb,6BACA,8BACI,yBAAKC,IAAI,oGAAoGC,IAAI,KAAKC,OAAO,QAAQC,MAAM,a,kBCNtI,SAASC,IACtB,OACE,kBAAC,IAAD,CACEC,MAAM,oCACNC,QAAS,CACP,CAAED,MAAO,iBAAkBE,MAAO,SAClC,CAAEF,MAAO,aAAcE,MAAO,aAC9B,CAAEF,MAAO,YAAaE,MAAO,YAC7B,CAAEF,MAAO,QAASE,MAAO,SACzB,CAAEF,MAAO,aAAcE,MAAO,YAAaC,KAAM,WACjD,CAAEH,MAAO,YAAaE,MAAO,aAG/BE,KAAM,CACJ,CAAEC,MAAO,yBAAKV,IAAI,IAAIC,IAAI,WAAWE,MAAM,QAAQD,OAAO,UAAgBS,UAAW,UAAWC,SAAS,QAASC,MAAO,qBAAsBC,UAAW,KAAMC,SAAU,oBAC1K,CAAEL,MAAO,yBAAKV,IAAI,oBAAoBC,IAAI,WAAWE,MAAM,QAAQD,OAAO,UAAgBS,UAAW,MAAOC,SAAS,UAAWC,MAAO,kBAAmBC,UAAW,KAAMC,SAAU,8BACrL,CAAEL,MAAO,yBAAKV,IAAI,oBAAoBC,IAAI,WAAWE,MAAM,QAAQD,OAAO,UAAgBS,UAAW,OAAQC,SAAS,UAAWC,MAAO,oBAAqBC,UAAW,KAAMC,SAAU,aACxL,CAAEL,MAAO,yBAAKV,IAAI,sBAAsBC,IAAI,WAAWE,MAAM,QAAQD,OAAO,UAAgBS,UAAW,SAAUC,SAAS,SAAUC,MAAO,wBAAyBC,UAAW,KAAMC,SAAU,cAC/L,CAAEL,MAAO,yBAAKV,IAAI,qBAAqBC,IAAI,WAAWE,MAAM,QAAQD,OAAO,UAAgBS,UAAW,QAASC,SAAS,UAAWC,MAAO,0BAA2BC,UAAW,KAAMC,SAAU,qBAChM,CAAEL,MAAO,yBAAKV,IAAI,sBAAsBC,IAAI,WAAWE,MAAM,QAAQD,OAAO,UAAgBS,UAAW,SAAUC,SAAS,UAAWC,MAAO,kCAAmCC,UAAW,KAAMC,SAAU,sBAG5MC,QAAS,CACPC,SAAS,KCnBFC,MAJf,SAAmBC,GACjB,OAAO,kBAAC,EAAD,O,OCOMC,MARf,WACE,OACE,4BAAQrB,UAAU,UAChB,mD,OCCSsB,MAJf,SAAiBF,GACf,OAAO,wCAAMpB,UAAU,WAAcoB,KCiBxBG,MAdf,WACE,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MACE,kBAAC,EAAD,KACE,kBAAC,EAAD,OAEJ,kBAAC,EAAD,SCHYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.79aa4788.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n// Depending on the current path, this component sets the \"active\" class on the appropriate navigation link item\nfunction Navbar() {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <hr></hr>\n      <span>\n          <img src=\"https://d2t1xqejof9utc.cloudfront.net/screenshots/pics/630b27dcbf83cd18fd64a7a84f25eb96/large.png\" alt=\"Dm\" height=\"200px\" width=\"500px\"></img>\n      </span>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport MaterialTable from \"material-table\";\n\nexport default function Directory() {\n  return (\n    <MaterialTable\n      title=\"Dunder Mifflin Employee Directory\"\n      columns={[\n        { title: \"Employee Image\", field: \"image\" },\n        { title: \"First Name\", field: \"firstName\" },\n        { title: \"Last Name\", field: \"lastName\" },\n        { title: \"Email\", field: \"email\" },\n        { title: \"Birth Year\", field: \"birthYear\", type: \"numeric\" },\n        { title: \"Job Title\", field: \"jobTitle\" },\n        \n      ]}\n      data={[\n        { image: <img src=\"*\" alt=\"Employee\" width=\"150px\" height=\"150px\"></img>, firstName: \"Michael\", lastName:\"Scott\", email: \"theSCARN@gmail.com\", birthYear: 1964, jobTitle: \"Regional Manager\" },\n        { image: <img src=\"../assets/jim.jpg\" alt=\"Employee\" width=\"150px\" height=\"150px\"></img>, firstName: \"Jim\", lastName:\"Halpert\", email: \"Smirk@gmail.com\", birthYear: 1978, jobTitle: \"Assistant Regional Manager\" },\n        { image: <img src=\"./assets/andy.jpg\" alt=\"Employee\" width=\"150px\" height=\"150px\"></img>, firstName: \"Andy\", lastName:\"Bernard\", email: \"NardDog@gmail.com\", birthYear: 1973, jobTitle: \"Sales Man\" },\n        { image: <img src=\"./assets/angela.jpg\" alt=\"Employee\" width=\"150px\" height=\"150px\"></img>, firstName: \"Angela\", lastName:\"Martin\", email: \"RIPSparkles@gmail.com\", birthYear: 1974, jobTitle: \"Accountant\" },\n        { image: <img src=\"./assets/creed.jpg\" alt=\"Employee\" width=\"150px\" height=\"150px\"></img>, firstName: \"Creed\", lastName:\"Bratton\", email: \"CreedThoughts@gmail.com\", birthYear: 1925, jobTitle: \"Quality Assurance\" },\n        { image: <img src=\"./assets/darryl.jpg\" alt=\"Employee\" width=\"150px\" height=\"150px\"></img>, firstName: \"Darryl\", lastName:\"Philbin\", email: \"YallHavinBirthdayCake@gmail.com\", birthYear: 1972, jobTitle: \"Warehouse Foreman\" },\n\n      ]}        \n      options={{\n        sorting: true\n      }}\n    />\n  )\n}\n\n\n// function createData(image, firstName, lastName, email, phoneNumber) {\n//   return { image, firstName, lastName, email, phoneNumber };\n// }\n\n// const rows = [\n//   createData(\"https://upload.wikimedia.org/wikipedia/en/d/dc/MichaelScott.png\", \"Michael\", \"Scott\", \"theScarnMan@dm.net\", 6158675309),\n//   createData(\"https://img.buzzfeed.com/buzzfeed-static/static/2017-08/9/11/asset/buzzfeed-prod-fastlane-01/sub-buzz-22381-1502291405-3.jpg?downsize=700%3A%2A&output-quality=auto&output-format=auto&output-quality=auto&output-format=auto&downsize=360:*\", \"Jim\", \"Halpert\", \"smirk@gmail.com\", 5555550001),\n// ];","import React from \"react\";\nimport Table from \"../Table\";\n\nfunction Container(props) {\n  return <Table/>\n}\n\nexport default Container;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <footer className=\"footer\">\n      <span>DM does GB 2020</span>\n    </footer>\n  );\n}\n\nexport default Footer;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <main className=\"wrapper\" {...props} />;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Navbar from \"./components/NavBar\";\nimport Container from \"./components/Container\";\nimport Footer from \"./components/Footbar\";\nimport Wrapper from \"./components/Wrapper\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Navbar/>\n          <Wrapper>\n            <Container/>\n          </Wrapper>\n        <Footer/>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}